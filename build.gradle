plugins {
    id 'net.nemerosa.versioning' version '1.0.0'
}

apply plugin: 'maven'

/**
 * Meta information
 */

allprojects {
    group = 'net.nemerosa.ontrack'
    version = versioning.info.full
}

/**
 * Dependency management
 */

apply from: "$rootDir/gradle/dependencies.gradle"

/**
 * Build task (used only as an anchor point at the root level)
 */

task build

/**
 * Java projects
 */

ext {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

def javaProjects = subprojects.findAll {
    it.path != ':ontrack-web' && it.path != ':ontrack-delivery'
}

configure(javaProjects) {

    /**
     * For all Java projects
     */

    apply plugin: 'java'

    dependencies {
        // TODO Lombok not to be released
        compile libraries.lombok
        // Testing
        testCompile libraries.junit
        testCompile libraries.mockito
    }

    // Unit tests run with the `test` task
    test {
        include '**/*Test.class'
        reports {
            html.enabled = false
        }
    }

    // Integration tests
    task integrationTest(type: Test, dependsOn: 'test') {
        include '**/*IT.class'
        ignoreFailures true
        reports {
            html.enabled = false
        }
    }

    // Acceptance tests
    task acceptanceTest(type: Test, dependsOn: 'integrationTest') {
        include '**/ACC*.class'
        ignoreFailures true
        reports {
            html.enabled = false
        }
    }

    // Release task
    task release(dependsOn: 'build') {}

}

/**
 * Publication in Maven repository
 */

apply from: 'gradle/maven.gradle'

/**
 * General test report
 */

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` tasks in all Java subprojects
    reportOn javaProjects*.test, javaProjects*.integrationTest, javaProjects*.acceptanceTest
}

/**
 * Release task.
 */
task release(dependsOn: ['versionDisplay']) {
}

/**
 * Wrapper definition
 */

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

/**
* Sonar settings
*/

if (project.hasProperty('sonar')) {

   apply plugin: 'sonar-runner'

   sonarRunner {
      toolVersion = '2.4'
      sonarProperties {
         property 'sonar.java.coveragePlugin', 'jacoco'
      }

   }

   configure(javaProjects) {

      apply plugin: 'jacoco'

      jacoco {
         toolVersion = '0.7.2.201409121644'
      }

      integrationTest {
         jacoco {
            append = true
            destinationFile = file("$buildDir/jacoco/test.exec")
         }
      }
   }

}
